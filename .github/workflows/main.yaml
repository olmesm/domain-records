name: Run Action

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

jobs:
  tofu:
    runs-on: ubuntu-latest
    env:
      TF_VAR_cloudflare_email: ${{ secrets.TF_VAR_cloudflare_email }}
      TF_VAR_cloudflare_api_token: ${{ secrets.TF_VAR_cloudflare_api_token }}
      BASE64_GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.BASE64_GOOGLE_APPLICATION_CREDENTIALS }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    steps:
      - uses: actions/checkout@v2
      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.2
      - name: Setup credentials
        run: sh ./scripts/decode-service-account-from-env.sh
      - name: Tofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true
      - name: Tofu Init
        id: init
        run: tofu init

      - name: Tofu Validate
        id: validate
        run: tofu validate -no-color

      - name: Tofu Plan
        id: plan
        run: tofu plan -no-color

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Tofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Tofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Tofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Tofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Tofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Tofu Apply
        if: github.ref == 'refs/heads/main'
        run: tofu apply -auto-approve
